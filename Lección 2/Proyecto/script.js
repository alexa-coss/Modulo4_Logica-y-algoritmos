/*
  üìå Pr√°ctica 2. Estructuras de Datos
  Gesti√≥n de Lista de Compras
*/


/*
    Objetivo

El objetivo de este proyecto es permitir que los estudiantes practiquen conceptos b√°sicos de c√≥mo usar
Estructuras de datos sencillas como arreglos y objetos para la solici√≥n de problemas del mundo real con JavaScript.


Imagina que eres parte del equipo encargado de crear una lista de compras utilizando un arreglo. Los usuarios deben
poder a√±adir productos a la lista, eliminar productos y ver la lista completa de compras.

‚Ä¢ Crea un arreglo vac√≠o llamado listaDeCompras.
‚Ä¢ Implementa una funci√≥n agregarProducto(producto) que agregue un nuevo producto al final de la lista.
‚Ä¢ Implementa una funci√≥n eliminarProducto(producto) que elimine un producto de la lista.
‚Ä¢ Implementa una funci√≥n mostrarLista() que imprima todos los productos de la lista.
‚Ä¢ Aseg√∫rate de que no haya productos duplicados en la lista.
‚Ä¢ Puedes usar arrow functions para la funcionalidad solicitada as√≠ como otras caracter√≠sticas del estandar ECMAScript.
*/


// Crear un arreglo vac√≠o para la lista de compras
let listaDeCompras = [];


// Funci√≥n de agregar producto al final de la lista
const agregarProducto = () => {
    //// Obtener valores del formulario
    const nombre = document.getElementById("nombre").value.trim(); //.trim() - eliminar espacios innecesarios.
    const precio = parseFloat(document.getElementById("precio").value); // parseFloat() - para verlo como n√∫mero y por si tiene decimales.
    const categoria = document.getElementById("categoria").value; // .value -> solo obtengo el valor (lo que est√° dentro del input).

    // Verificar valores vac√≠os o incorrectos
    if (!nombre || isNaN(precio) || !categoria) { // "nombre" y "precio" est√°n vac√≠os y "precio" no es n√∫mero.
        mostrarModal('Por favor, completa todos los campos para a√±adir un producto.');
        return;
    }

    // Crear un objeto producto
    const producto = { nombre, precio, categoria };

    // Verificar si el producto ya est√° en la lista
    const existe = listaDeCompras.some(p => p.nombre === producto.nombre);

    if (!existe) {
        listaDeCompras.push(producto);
        mostrarLista();
    } else {
        mostrarModal("Este producto ya est√° en la lista.");
    }
}


// Funci√≥n de eliminar producto
const eliminarProducto = (index) => {
    listaDeCompras.splice(index,1);
    mostrarLista();
    mostrarModal("Este producto se elimin√≥ de la lista.");
}


// Funci√≥n de mostrar lista de compras
const mostrarLista = () => {
    const listaElement = document.getElementById('lista-compras');
    listaElement.innerHTML = ''; // Limpiar lista actual.

    // Recorrer lista y agregar productos
    listaDeCompras.forEach((producto, index) => {
        const li = document.createElement('li'); // Crear nuevo elemento li.
        li.innerHTML  = `${producto.nombre} - $${producto.precio} <br> <span class="categoria">| Categor√≠a: ${producto.categoria}</span>`;

        // Button de eliminar (en cada producto)
        const botonEliminar = document.createElement('button');
            botonEliminar.textContent = 'Eliminar';
            botonEliminar.classList.add('eliminar'); // Agregar la clase 'eliminar'
            botonEliminar.onclick = () => eliminarProducto(index);

        li.appendChild(botonEliminar); // Agregar button al li.
        listaElement.appendChild(li); // Agregar el li en #lista-compras.

        // Verificar si el bot√≥n se est√° creando correctamente
        console.log(botonEliminar); // Deber√≠a imprimir el bot√≥n en la consola.
    });
}


// Funci√≥n para mostrar el modal con el mensaje
const mostrarModal = (mensaje) => {
    const modal = document.getElementById('modal');
    const modalText = document.getElementById('modal-text');

    modalText.textContent = mensaje; // Establecer mensaje.
    modal.style.display = 'block'; // Mostrar modal.
};


// Funci√≥n para cerrar el modal
const cerrarModal = () => {
    const modal = document.getElementById('modal');
    modal.style.display = 'none'; // Ocultar modal.
};


// Evento para manejar la adici√≥n de productos
document.getElementById('compras-form').addEventListener('submit', (event) => {
    event.preventDefault(); // Prevenir el env√≠o del formulario (que se refresque la pantalla)

    agregarProducto();
    document.getElementById('compras-form').reset(); // Limpiar el formulario.
});